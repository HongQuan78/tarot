@page
@model IndexModel
<link rel="stylesheet" href="~/css/Index.css" type="text/css" />
@{
    ViewData["Title"] = "Home page";
    var deckId = 0;
}

<div class="img-container">
</div>

<div class="row my-4">
    <div class="col-6 text-end">
        <a class="btn btn-lg btn-custom" style="background-color:#3c393c;color:#fcb831" href="/index">Tarot Online</a>
    </div>
    <div class="col-6">
        <a class="btn btn-lg btn-custom" style="background-color:#3c393c" href="/tarotreader">Tarot Readers</a>
    </div>
</div>
<div class="row">

    <div class="col-4 text-end" style="margin-left:30px;">
        <label class="card-choose-lable text-center">Chọn Bộ Bài</label>
    </div>
    <div class="col-6">
        <div class="select-container">
            <select class="form-select-lg text-white" style="background-color: #3c393c" id="deckSelector">
                @for (int i = 0; i < Model.deckList.Count; i++)
                {
                    if (i == 0)
                    {
                        deckId = Model.deckList[i].DeckId;
                        <option selected value="@Model.deckList[i].ImageUrl">@Model.deckList[i].Type</option>
                    }
                    else
                    {
                        deckId = Model.deckList[i].DeckId;
                        <option value="@Model.deckList[i].ImageUrl">@Model.deckList[i].Type</option>
                    }
                }
            </select>
        </div>
    </div>

</div>
<div class="choose-text-container">
    <h3 class="text-center my-2" style="color: #FCB831">Hãy chọn 3 lá bài</h3>
</div>
<div class="not-selected-card-container" style="margin: 30px; margin-left: 200px; margin-right: 200px; width: 80%;">
    @for (int i = 0; i < Model.cardList.Count; i++)
    {
        <div class="card-container">
            <div class="text-white card" data-name="Lá bài @Model.cardList[i].Name" data-meaning=" nói rằng @Model.cardList[i].Meanings.FirstOrDefault()?.Meaning1" ).">
                <!-- This is just a placeholder -->
                <div class="card-back">
                    <img src="~/images/cardback/riderwaite.jpg" alt="Card Back" />
                </div>
                <div class="card-front">
                    <img src="~/images/cards/@Model.cardList[i].CardImages.SingleOrDefault(x=>x.DeckId==deckId && x.CardId == Model.cardList[i].CardId)?.ImageUrl" alt="Card Front" />
                </div>
            </div>
        </div>
    }
</div>


<div class="selected-card-container my-3">
    <div class="d-flex justify-content-center" id="selected-card-block">
    </div>
   
</div>
<div class="explain-text">
</div>
<div id="meanings-container" class="row mt-5" style="margin-top:10em !important">
    <div class="col text-center">
        <div id="meanings-output" style="background-color:#3e065f;color:#FCB831"></div>
    </div>
</div>
<div class="row" style="margin: 100px">
    <div class=" text-container">
        <p style="color:#FCB831">
            <strong>Tarot là gì? Nguồn gốc bài Tarot</strong><br />

            Tarot là các lá bài dùng để xem bói, bắt đầu xuất hiện tại Châu Âu vào cuối thế kỷ 14. Bói bài Tarot sẽ giúp người xem lý giải được cuộc sống hiện tại, điềm báo sắp tới. Người bói cần biết cách sắp xếp các lá bài và giải mã chúng. Mỗi một lá bài trong Tarot đều hàm chứa ý nghĩa riêng biệt. Độ chính xác của việc bói bài Tarot đã được kiểm chứng.
            <br />
            <strong>Cấu tạo bài Tarot</strong><br />
            Tarot là gì? Bài Tarot có tổng cộng 78 lá được chia thành 2 nhóm chính. Bao gồm Lá ẩn chính (Major Arcana) và Lá ẩn phụ (Minor Arcana)............
        </p>
    </div>
</div>

<script>
    let flippedCount = 0;

    document.querySelectorAll('.not-selected-card-container .card').forEach(function (card) {
        card.addEventListener('click', function () {
            let selectedCardBlock = document.querySelector('#selected-card-block');

            // Check if already 3 cards are selected
            if (selectedCardBlock.querySelectorAll('.cardDraw').length < 3) {
                // Clone the card
                let clonedCard = this.cloneNode(true);

                // Create a card-container for the cloned card
                let cardContainer = document.createElement('div');
                cardContainer.classList.add('card-container');

                // Create a cardDraw container inside card-container
                let cardDrawContainer = document.createElement('div');
                cardDrawContainer.classList.add('cardDraw');
                cardContainer.appendChild(cardDrawContainer);

                // Append the cloned card to cardDraw container
                cardDrawContainer.appendChild(clonedCard);

                // Append the card-container to the selected-card-block
                selectedCardBlock.appendChild(cardContainer);

                // Remove the original card from not-selected-card-container
                this.remove();

                // Add flip event listener to the newly added card in selected-card-block
                clonedCard.addEventListener('click', function flipCard() {
                    this.classList.toggle('flipped');
                    this.removeEventListener('click', flipCard);

                    // Extract the card name and its meaning
                    let cardName = this.getAttribute('data-name');
                    let meaningText = this.getAttribute('data-meaning');
                    let cardMeaning = meaningText.split(" ").slice(2).join(" ");

                    // Create a new paragraph for the card's meaning
                    let p = document.createElement('p');
                    p.innerHTML = `<strong>${cardName}</strong>: ${cardMeaning}`;
                    document.getElementById('meanings-output').appendChild(p);

                    flippedCount++;

                    // If 3 cards have been flipped, display the meanings
                    if (flippedCount === 3) {
                        // No need to join the meanings now, as they're already added as separate paragraphs
                    }

                    // Hiển thị ô chứa ý nghĩa
                    document.getElementById('meanings-output').style.display = 'block';
                });
            }
        });
    });

    document.querySelector('.card').addEventListener('click', function flipOriginalCard() {
        this.classList.toggle('flipped');
        this.removeEventListener('click', flipOriginalCard);

        // Extract the card name and its meaning
        let cardName = this.getAttribute('data-name');
        let meaningText = this.getAttribute('data-meaning');
        let cardMeaning = meaningText.split(" ").slice(2).join(" ");

        // Create a new paragraph for the card's meaning
        let p = document.createElement('p');
        p.className = "meaning-text";
        p.innerHTML = `<strong>${cardName}</strong>: ${cardMeaning}`;
        document.getElementById('meanings-output').appendChild(p);

        flippedCount++;

        // If 3 cards have been flipped, display the meanings
        if (flippedCount === 3) {
            // No need to join the meanings now, as they're already added as separate paragraphs
        }

        // Hiển thị ô chứa ý nghĩa
        document.getElementById('meanings-output').style.display = 'block';
    });


</script>

        <style>

   
        </style>