@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
    var deckId = 0;
}

<div class="img-container">
</div>

<div class="row my-4">
    <div class="col-6 text-end">
        <a class="btn btn-lg btn-custom" style="background-color:#3c393c;color:#fcb831" href="/index">Tarot Online</a>
    </div>
    <div class="col-6">
        <a class="btn btn-lg btn-custom" style="background-color:#3c393c" href="/tarotreader">Tarot Readers</a>
    </div>
</div>
<div class="row">

    <div class="col-4 text-end" style="margin-left:30px;">
        <label class="card-choose-lable text-center">Chọn Bộ Bài</label>
    </div>
    <div class="col-6">
        <div class="select-container">
            <select class="form-select-lg text-white" style="background-color: #3c393c" id="deckSelector">
                @for (int i = 0; i < Model.deckList.Count; i++)
                {
                    if (i == 0)
                    {
                        deckId = Model.deckList[i].DeckId;
                        <option selected value="@Model.deckList[i].ImageUrl">@Model.deckList[i].Type</option>
                    }
                    else
                    {
                        deckId = Model.deckList[i].DeckId;
                        <option value="@Model.deckList[i].ImageUrl">@Model.deckList[i].Type</option>
                    }
                }
            </select>
        </div>
    </div>

</div>

<div class="not-selected-card-container" style="margin: 30px; margin-left: 200px; margin-right: 200px; width: 80%;">
    <div class="choose-card">
        <div class="circle">
            <p class="choose-text">Chọn bài</p>
        </div>
    </div>
    @for (int i = 0; i < Model.cardList.Count; i++)
    {
        <div class="card-container">
            <div class="text-white card" data-meaning="Card @Model.cardList[i].Name nói rằng @Model.cardList[i].Meanings.FirstOrDefault()?.Meaning1").">
                <!-- This is just a placeholder -->
                <div class="card-back">
                    <img src="~/images/cardback/riderwaite.jpg" alt="Card Back" />
                </div>
                <div class="card-front">
                    <img src="~/images/cards/@Model.cardList[i].CardImages.SingleOrDefault(x=>x.DeckId==deckId && x.CardId == Model.cardList[i].CardId)?.ImageUrl" alt="Card Front" />
                </div>
            </div>
        </div>
    }
</div>


<div class="selected-card-container my-3">
    <div class="d-flex justify-content-center" id="selected-card-block">
    </div>
    <div id="meanings-container" class="row mt-5">
        <div class="col text-center">
            // Meaning output
            <div id="meanings-output"></div>
        </div>
    </div>
</div>
<div class="row" style="margin: 100px">
    <div class=" text-container">
        <p style="color:#FCB831">
            <strong>Tarot là gì? Nguồn gốc bài Tarot</strong><br />

            Tarot là các lá bài dùng để xem bói, bắt đầu xuất hiện tại Châu Âu vào cuối thế kỷ 14. Bói bài Tarot sẽ giúp người xem lý giải được cuộc sống hiện tại, điềm báo sắp tới. Người bói cần biết cách sắp xếp các lá bài và giải mã chúng. Mỗi một lá bài trong Tarot đều hàm chứa ý nghĩa riêng biệt. Độ chính xác của việc bói bài Tarot đã được kiểm chứng.
            <br />
            <strong>Cấu tạo bài Tarot</strong><br />
            Tarot là gì? Bài Tarot có tổng cộng 78 lá được chia thành 2 nhóm chính. Bao gồm Lá ẩn chính (Major Arcana) và Lá ẩn phụ (Minor Arcana)............
        </p>
    </div>
</div>
<style>
    .btn-custom {
        width: 50%;
        height: 100%;
        color: white;
        font-size: 20px;
        font-weight: bold;
        border-radius: 10px;
    }

    .img-container {
        background-image: url("images/main.png");
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center;
        height: 50vh;
    }

    .card-choose-lable {
        font-size: 20px;
        font-weight: bold;
        color: white;
        background-color: #3c393c;
        width: 150px;
        padding: 10px;
        border-radius: 10px;
    }

    .select-container {
        width: 80%;
    }

        .select-container select {
            border-radius: 10px;
            font-size: 20px;
            font-weight: bold;
            color: white;
            width: 100%;
        }

    #selected-card-block img:hover {
        cursor: pointer;
    }

    .not-selected-card-container {
        display: flex;
        flex-direction: row;
        align-items: center;
    }

    .card {
        width: 100px; /* Điều chỉnh kích thước của lá bài */
        height: 150px;
        margin-right: -50px; /* Khoảng cách giữa các lá bài */
        position: relative;
        background-color: transparent;
    }

        .card img {
            max-width: 100%;
        }

    .choose-card {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        background-color: #3c393c;
        margin-left: 20px;
        margin-right: 40px;
        height: 100px;
        width: 100px;
        border-radius: 50%;
    }

    .circle {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%; /* same as the parent .choose-card width */
        height: 100%; /* same as the parent .choose-card height */
        border-radius: 50%;
    }

    .choose-text {
        font-size: 18px;
        font-weight: bold;
        color: white;
    }


    .choose-card:hover{
        cursor: pointer;
    }

    .card-container {
        perspective: 1000px;
        width: 200px; /* Adjust width as needed */
        height: 300px; /* Adjust height as needed */
    }

    .card {
        width: 100%;
        height: 100%;
        position: relative;
        transition: transform 0.5s;
        transform-style: preserve-3d;
        cursor: pointer;
    }

    .card-back, .card-front {
        position: absolute;
        top: 0;
        left: 0;
        backface-visibility: hidden;
        width: 100%;
        height: 100%;
    }

    .card-front {
        transform: rotateY(180deg);
    }

    .card.flipped {
        transform: rotateY(180deg);
    }

</style>

<script>
    let flippedCount = 0; // To keep track of how many cards have been flipped
    let meanings = [];    // To store the meanings of the flipped cards as an array

    document.querySelectorAll('.not-selected-card-container .card').forEach(function (card) {
        card.addEventListener('click', function () {
            let selectedCardBlock = document.querySelector('#selected-card-block');

            // Check if already 3 cards are selected
            if (selectedCardBlock.querySelectorAll('.cardDraw').length < 3) {
                // Clone the card
                let clonedCard = this.cloneNode(true);

                // Create a card-container for the cloned card
                let cardContainer = document.createElement('div');
                cardContainer.classList.add('card-container');

                // Create a cardDraw container inside card-container
                let cardDrawContainer = document.createElement('div');
                cardDrawContainer.classList.add('cardDraw');
                cardContainer.appendChild(cardDrawContainer);

                // Append the cloned card to cardDraw container
                cardDrawContainer.appendChild(clonedCard);

                // Append the card-container to the selected-card-block
                selectedCardBlock.appendChild(cardContainer);

                // Remove the original card from not-selected-card-container
                this.remove();

                // Add flip event listener to the newly added card in selected-card-block
                clonedCard.addEventListener('click', function flipCard() {
                    this.classList.toggle('flipped');
                    this.removeEventListener('click', flipCard); // Remove the click event listener after flipping

                    // Assuming that each card has a "data-meaning" attribute to store its meaning.
                    // Add the meaning of the flipped card to the meanings array
                    meanings.push(this.getAttribute('data-meaning'));
                    flippedCount++;

                    // If 3 cards have been flipped, display the meanings
                    if (flippedCount === 3) {
                        document.getElementById('meanings-output').innerHTML = meanings.join('<br>');
                    }
                });
            }
        });
    });

    document.querySelector('.card').addEventListener('click', function flipOriginalCard() {
        this.classList.toggle('flipped');
        this.removeEventListener('click', flipOriginalCard); // Remove the click event listener after flipping

        // Assuming that each card has a "data-meaning" attribute to store its meaning.
        // Add the meaning of the flipped card to the meanings array
        meanings.push(this.getAttribute('data-meaning'));
        flippedCount++;

        // If 3 cards have been flipped, display the meanings
        if (flippedCount === 3) {
            document.getElementById('meanings-output').innerHTML = meanings.join('<br>');
        }
    });
</script>